name: Granulation Range

description: |
   Dependencies: sc3-plugins

   A variation of the Granulation module that uses ranges for amp, pan and pitch. This should be enough as a start to hack other parameters as ranges.

   velocity: Speed of advance in infile, relative to outfile (Range: >= 0) This is the inverse of a timestretch (i.e., 1/n\: higher values make the output shorter, lower values – less than 1 – make it longer). This permits an infinite timestretch.
   density: Amount of grain overlap (Range: > 0) Values < 1 leaves intergrain silence, i.e., gaps. Extremely small values will cease to perform predictably.
   grainsize: Size of the grains in milliseconds (must be larger than bsplice + esplice).
   pitchshiftMin: Minimum transposition of grains rate.
   pitchshiftMax: Maximum transposition of grains rate.
   grainAmpMin: Minimum amplitude of individual grains.
   grainAmpMax: Maximum amplitude of individual grains.
   bsplice: Begin splice,  length of start-splices on grains in seconds.
   esplice: End splice,  length of end-splices on grains in seconds.
   panMin:  Minimum stereo position in outfile (-1, 1).
   panMax:  Maximum stereo position in outfile (-1, 1).

tags:
  - grain
  - granulation
  - audiofile
  - TGrains
  - CDP

author: Dionysis Athinaios

example: |
  (
  b = Platform.resourceDir +/+ "sounds/a11wlk01.wav";
  b = Buffer.read(Server.default, b);
  c.runModule('Granulation', [
    \buffer, b,
    \density, 10,
    \velocity, 0.3,
    \grainsize, 0.2,
    \grainAmp, 1,
    \pitchshift, 1,
    \bsplice, 0.003,
    \esplice, 0.0497,
    \pan, 0
  ]);
  );

preview: |
  {
    arg modules; var sound;
    b = Platform.resourceDir +/+ "sounds/a11wlk01.wav";
    b = Buffer.read(Server.default, b);
    {
      0.2.wait;
      sound = modules.run('Granulation', [
        \buffer, b,
        \density, 10,
        \velocity, 0.3,
        \grainsize, 0.04,
        \grainAmp, 1,
        \pitchshift, 1,
        \bsplice, 0.003,
        \esplice, 0.0497,
        \pan, 0
      ], options: (global: true));
      4.wait;
      sound.stop; b.free;
    }.fork;
  }
